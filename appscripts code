/**
 * Pure discovery: Get all available reports and their data
 */
function discoverAllReports() {
  const props = PropertiesService.getScriptProperties();
  const SID   = props.getProperty('IMPACT_SID');
  const TOKEN = props.getProperty('IMPACT_TOKEN');
  const endpoint = `https://api.impact.com/Mediapartners/${SID}/Reports`;
  const basic = Utilities.base64Encode(`${SID}:${TOKEN}`);
  
  const res = UrlFetchApp.fetch(endpoint, {
    headers: {
      Authorization: `Basic ${basic}`,
      Accept:        'application/json'
    },
    muteHttpExceptions: true
  });
  
  if (res.getResponseCode() !== 200) {
    throw new Error('List Reports error: ' + res.getContentText());
  }
  
  const payload = JSON.parse(res.getContentText());
  const reports = payload.Reports || [];
  
  // Log what we found
  console.log(`\nDISCOVERY: Found ${reports.length} total reports`);
  console.log('API Accessible reports:');
  
  const accessible = reports.filter(r => r.ApiAccessible);
  accessible.forEach((report, index) => {
    console.log(`${index + 1}. ${report.Id} - ${report.Name || 'No name'}`);
  });
  
  console.log(`\nRestricted reports:`);
  const restricted = reports.filter(r => !r.ApiAccessible);
  restricted.forEach((report, index) => {
    console.log(`${index + 1}. ${report.Id} - ${report.Name || 'No name'}`);
  });
  
  Logger.log(`Discovery complete: ${accessible.length} accessible, ${restricted.length} restricted`);
  
  return accessible;
}

/**
 * Export all accessible reports - no date filters, just raw data
 */
function exportAllReportsRaw() {
  const props = PropertiesService.getScriptProperties();
  const SID   = props.getProperty('IMPACT_SID');
  const TOKEN = props.getProperty('IMPACT_TOKEN');
  const basicAuth = Utilities.base64Encode(`${SID}:${TOKEN}`);
  
  const accessibleReports = discoverAllReports();
  
  console.log(`\nEXPORTING: Starting exports for ${accessibleReports.length} reports`);
  
  const scheduledJobs = {};
  const exportErrors = [];
  
  accessibleReports.forEach((report, index) => {
    console.log(`\n${index + 1}/${accessibleReports.length}: Exporting ${report.Id}...`);
    
    try {
      // Minimal parameters - just the report and subid
      const url = `https://api.impact.com/Mediapartners/${SID}/ReportExport/${report.Id}?subid=mula`;
      
      const res = UrlFetchApp.fetch(url, {
        headers: {
          Authorization: `Basic ${basicAuth}`,
          Accept:        'application/json'
        },
        muteHttpExceptions: true
      });
      
      console.log(`Response: ${res.getResponseCode()}`);
      
      if (res.getResponseCode() === 200) {
        const job = JSON.parse(res.getContentText());
        const jobId = job.QueuedUri.match(/\/Jobs\/([^/]+)/)[1];
        
        scheduledJobs[report.Id] = {
          jobId: jobId,
          name: report.Name || report.Id,
          status: 'scheduled'
        };
        
        console.log(`‚úì Scheduled: ${jobId}`);
      } else {
        const errorMsg = res.getContentText();
        console.log(`‚úó Failed: ${errorMsg}`);
        exportErrors.push({
          reportId: report.Id,
          error: errorMsg
        });
      }
      
    } catch (error) {
      console.log(`‚úó Error: ${error.message}`);
      exportErrors.push({
        reportId: report.Id,
        error: error.message
      });
    }
    
    // Rate limiting
    if (index < accessibleReports.length - 1) {
      Utilities.sleep(2000);
    }
  });
  
  props.setProperty('DISCOVERY_JOBS', JSON.stringify(scheduledJobs));
  props.setProperty('DISCOVERY_ERRORS', JSON.stringify(exportErrors));
  
  Logger.log(`Export scheduling complete: ${Object.keys(scheduledJobs).length} scheduled, ${exportErrors.length} failed`);
  
  return {
    scheduled: scheduledJobs,
    errors: exportErrors
  };
}

/**
 * Fetch all scheduled exports and create discovery spreadsheet
 */
function fetchAllDiscoveryData() {
  const props = PropertiesService.getScriptProperties();
  const SID   = props.getProperty('IMPACT_SID');
  const TOKEN = props.getProperty('IMPACT_TOKEN');
  const basic = Utilities.base64Encode(`${SID}:${TOKEN}`);
  
  const jobsJson = props.getProperty('DISCOVERY_JOBS');
  if (!jobsJson) {
    throw new Error('No discovery jobs found. Run exportAllReportsRaw() first.');
  }
  
  const jobs = JSON.parse(jobsJson);
  const reportIds = Object.keys(jobs);
  
  console.log(`\nFETCHING: Processing ${reportIds.length} export jobs...`);
  
  const ss = SpreadsheetApp.openById('1QDOxgElRvl6EvI02JP4knupUd-jLW7D6LJN-VyLS3ZY');
  
  // Clear all existing sheets
  const sheets = ss.getSheets();
  sheets.forEach((sheet, index) => {
    if (index > 0) { // Keep the first sheet
      ss.deleteSheet(sheet);
    }
  });
  
  const discoveryResults = [];
  const fetchErrors = [];
  
  reportIds.forEach((reportId, index) => {
    const jobInfo = jobs[reportId];
    console.log(`\n${index + 1}/${reportIds.length}: Fetching ${reportId}...`);
    
    try {
      const jobUrl = `https://api.impact.com/Mediapartners/${SID}/Jobs/${jobInfo.jobId}`;
      let status, downloadUrl;
      
      // Poll for completion
      for (let i = 0; i < 12; i++) {
        Utilities.sleep(10000);
        const res = UrlFetchApp.fetch(jobUrl, {
          headers: { Authorization: `Basic ${basic}`, Accept: 'application/json' },
          muteHttpExceptions: true
        });
        
        if (res.getResponseCode() !== 200) {
          throw new Error(`Job status failed: ${res.getContentText()}`);
        }
        
        const info = JSON.parse(res.getContentText());
        status = (info.Status || '').toLowerCase();
        
        if (status === 'completed') {
          downloadUrl = 'https://api.impact.com' + info.ResultUri;
          break;
        } else if (status === 'failed') {
          throw new Error('Job failed');
        }
        
        console.log(`  Poll ${i+1}: ${status}`);
      }
      
      if (status !== 'completed') {
        throw new Error(`Timeout: ${status}`);
      }
      
      // Download the data
      const csvResponse = UrlFetchApp.fetch(downloadUrl, { 
        headers: { Authorization: `Basic ${basic}` } 
      });
      const csv = Utilities.parseCsv(csvResponse.getContentText());
      
      if (!csv || csv.length === 0) {
        throw new Error('No data returned');
      }
      
      // Create sheet for this report
      const sheetName = reportId.length > 25 ? reportId.substring(0, 25) : reportId;
      const sheet = ss.insertSheet(sheetName);
      
      // Import all the data
      sheet.getRange(1, 1, csv.length, csv[0].length).setValues(csv);
      
      // Format header row
      if (csv.length > 0) {
        const headerRange = sheet.getRange(1, 1, 1, csv[0].length);
        headerRange.setFontWeight('bold');
        headerRange.setBackground('#e8f5e8');
        headerRange.setFontColor('#2e7d32');
        sheet.setFrozenRows(1);
        
        // Add note with discovery info
        sheet.getRange('A1').setNote(
          `DISCOVERY REPORT\n` +
          `Report ID: ${reportId}\n` +
          `Report Name: ${jobInfo.name}\n` +
          `Data Rows: ${csv.length - 1}\n` +
          `Columns: ${csv[0].length}\n` +
          `Headers: ${csv[0].join(', ')}\n` +
          `Fetched: ${new Date().toLocaleString()}`
        );
      }
      
      discoveryResults.push({
        reportId: reportId,
        reportName: jobInfo.name,
        sheetName: sheetName,
        rows: csv.length - 1,
        columns: csv[0].length,
        headers: csv[0],
        sampleData: csv.length > 1 ? csv[1] : []
      });
      
      console.log(`‚úì ${reportId}: ${csv.length - 1} rows, ${csv[0].length} columns imported`);
      
    } catch (error) {
      console.log(`‚úó ${reportId}: ${error.message}`);
      fetchErrors.push({
        reportId: reportId,
        error: error.message
      });
    }
  });
  
  // Create discovery summary sheet
  const summarySheet = ss.getSheets()[0];
  summarySheet.setName('DISCOVERY SUMMARY');
  summarySheet.clear();
  
  // Build comprehensive summary
  const summaryData = [
    ['Report ID', 'Report Name', 'Sheet Name', 'Rows', 'Columns', 'Key Headers', 'Status']
  ];
  
  discoveryResults.forEach(result => {
    const keyHeaders = result.headers.slice(0, 5).join(', ') + (result.headers.length > 5 ? '...' : '');
    summaryData.push([
      result.reportId,
      result.reportName,
      result.sheetName,
      result.rows,
      result.columns,
      keyHeaders,
      'SUCCESS'
    ]);
  });
  
  fetchErrors.forEach(error => {
    summaryData.push([
      error.reportId,
      'N/A',
      'N/A',
      0,
      0,
      'N/A',
      error.error
    ]);
  });
  
  summarySheet.getRange(1, 1, summaryData.length, summaryData[0].length).setValues(summaryData);
  
  // Format summary
  const headerRange = summarySheet.getRange(1, 1, 1, summaryData[0].length);
  headerRange.setFontWeight('bold');
  headerRange.setBackground('#fff3e0');
  headerRange.setFontColor('#e65100');
  summarySheet.setFrozenRows(1);
  summarySheet.autoResizeColumns(1, summaryData[0].length);
  
  Logger.log(`üéâ DISCOVERY COMPLETE!`);
  Logger.log(`‚úì ${discoveryResults.length} reports successfully imported`);
  Logger.log(`‚úó ${fetchErrors.length} reports failed`);
  Logger.log(`üìä Total sheets: ${discoveryResults.length + 1}`);
  
  return {
    successful: discoveryResults,
    failed: fetchErrors,
    totalSheets: discoveryResults.length + 1,
    sheetUrl: ss.getUrl()
  };
}

/**
 * Complete discovery process - one click to see everything
 */
function runCompleteDiscovery() {
  try {
    Logger.log('üîç Starting complete Impact.com data discovery...');
    
    // Step 1: Export all reports
    const exportResults = exportAllReportsRaw();
    Logger.log(`üì§ Export phase: ${Object.keys(exportResults.scheduled).length} scheduled, ${exportResults.errors.length} failed`);
    
    if (Object.keys(exportResults.scheduled).length === 0) {
      throw new Error('No reports were successfully scheduled for export');
    }
    
    // Step 2: Wait for processing
    Logger.log('‚è≥ Waiting for exports to process...');
    Utilities.sleep(30000); // 30 seconds
    
    // Step 3: Fetch all the data
    const results = fetchAllDiscoveryData();
    
    Logger.log(`üéâ DISCOVERY MISSION COMPLETE!`);
    Logger.log(`üìã Reports discovered and imported: ${results.successful.length}`);
    Logger.log(`‚ùå Reports that failed: ${results.failed.length}`);
    Logger.log(`üìä Total data sheets created: ${results.totalSheets - 1}`);
    Logger.log(`üîó View your discovery: ${results.sheetUrl}`);
    
    // Log what we found
    console.log('\n=== DISCOVERY FINDINGS ===');
    results.successful.forEach(result => {
      console.log(`${result.reportId}: ${result.rows} rows, headers: ${result.headers.join(', ')}`);
    });
    
    return results;
    
  } catch (error) {
    Logger.log(`‚ùå Discovery failed: ${error.message}`);
    throw error;
  }
}
